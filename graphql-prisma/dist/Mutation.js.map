{"version":3,"sources":["../src/resolvers/Mutation.js"],"names":["Mutation","createUser","db","emailTaken","user","args","id","deleteUser","userIndex","deletedUsers","match","post","comment","updateUser","data","console","createPost","pubsub","userExists","mutation","deletePost","postIndex","updatePost","originalPost","createComment","postExists","deleteComment","commentIndex","deletedComment","updateComment"],"mappings":"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","sourcesContent":["import { v4 as uuid4 } from 'uuid';\n\nconst Mutation = {\n  createUser(parent, args, { db }) {\n    const emailTaken = db.users.some((user) => user.email === args.data.email);\n\n    if (emailTaken) {\n      throw new Error('Email is already taken.');\n    }\n\n    const user = {\n      id: uuid4(),\n      ...args.data,\n    };\n\n    db.users.push(user);\n\n    return user;\n  },\n  deleteUser(parent, args, { db }) {\n    const userIndex = db.users.findIndex((user) => user.id === args.id);\n\n    if (userIndex === -1) {\n      throw new Error('No user found.');\n    }\n\n    const deletedUsers = db.users.splice(userIndex, 1);\n\n    db.posts = db.posts.filter((post) => {\n      const match = post.author === args.id;\n\n      if (match)\n        db.comments = db.comments.filter((comment) => comment.post !== post.id);\n\n      return !match;\n    });\n\n    db.comments = db.comments.filter((comment) => comment.author !== args.id);\n\n    return deletedUsers;\n  },\n  updateUser(parent, args, { db }) {\n    const { id, data } = args;\n    const user = db.users.find((user) => user.id === id);\n\n    if (!user) {\n      throw new Error('User not found.');\n    }\n\n    if (typeof data.email === 'string') {\n      const emailTaken = db.users.some((user) => user.email === data.email);\n\n      if (emailTaken) {\n        throw new Error('Email is already taken');\n      }\n\n      user.email = data.email;\n    }\n\n    if (typeof data.name === 'string') {\n      user.name = data.name;\n    }\n\n    if (typeof data.age !== 'undefined') {\n      user.age = data.age;\n    }\n\n    console.log(user);\n    return user;\n  },\n  createPost(parent, args, { db, pubsub }) {\n    const userExists = db.users.some((user) => user.id === args.data.author);\n\n    if (!userExists) {\n      throw new Error('User not found.');\n    }\n\n    const post = {\n      id: uuid4(),\n      ...args.data,\n    };\n\n    db.posts.push(post);\n\n    if (args.data.published) {\n      pubsub.publish(`post`, {\n        post: {\n          mutation: 'CREATED',\n          data: post,\n        },\n      });\n    }\n\n    return post;\n  },\n  deletePost(parent, args, { db, pubsub }) {\n    const postIndex = db.posts.findIndex((post) => post.id === args.id);\n\n    if (postIndex === -1) {\n      throw new Error('Post does not exists.');\n    }\n\n    const [post] = db.posts.splice(postIndex, 1);\n\n    db.comments = db.comments.filter((comment) => comment.post !== args.id);\n\n    if (post.published) {\n      pubsub.publish('post', {\n        post: {\n          mutation: 'DELETED',\n          data: post,\n        },\n      });\n    }\n\n    return post;\n  },\n  updatePost(parent, args, { db, pubsub }) {\n    const { id, data } = args;\n    const post = db.posts.find((post) => post.id === id);\n    const originalPost = { ...post };\n\n    if (!post) {\n      throw new Error('Post does not exists!');\n    }\n\n    if (typeof data.title === 'string') {\n      post.title = data.title;\n    }\n\n    if (typeof data.body === 'string') {\n      post.body = data.body;\n    }\n\n    if (typeof data.published === 'boolean') {\n      post.published = data.published;\n\n      if (originalPost.published && !post.published) {\n        pubsub.publish('post', {\n          post: {\n            mutation: 'DELETED',\n            data: originalPost,\n          },\n        });\n      } else if (!originalPost.published && post.published) {\n        pubsub.publish('post', {\n          post: {\n            mutation: 'CREATED',\n            data: post,\n          },\n        });\n      }\n    } else if (post.published) {\n      pubsub.publish('post', {\n        post: {\n          mutation: 'UPDATED',\n          data: post,\n        },\n      });\n    }\n\n    return post;\n  },\n  createComment(parent, args, { db, pubsub }) {\n    const userExists = db.users.some((user) => user.id === args.data.author);\n    const postExists = db.posts.some(\n      (post) => post.id === args.data.post && post.published\n    );\n\n    if (!userExists) {\n      throw new Error('User not found.');\n    } else if (!postExists) {\n      throw new Error('Post does not exists or is not published');\n    }\n\n    const comment = {\n      id: uuid4(),\n      ...args.data,\n    };\n\n    db.comments.push(comment);\n\n    pubsub.publish(`comment ${args.data.post}`, {\n      comment: {\n        mutation: 'CREATED',\n        data: comment,\n      },\n    });\n\n    return comment;\n  },\n  deleteComment(parent, { id, data }, { db, pubsub }) {\n    const commentIndex = db.comments.findIndex((comment) => comment.id === id);\n\n    if (commentIndex === -1) {\n      throw new Error('Comment does not exists.');\n    }\n\n    const [deletedComment] = db.comments.splice(commentIndex, 1);\n\n    pubsub.publish(`comment ${deletedComment.post}`, {\n      comment: {\n        mutation: 'DELETED',\n        data: deletedComment,\n      },\n    });\n\n    return deletedComment;\n  },\n  updateComment(parent, { id, data }, { db, pubsub }) {\n    const comment = db.comments.find((comment) => comment.id === id);\n\n    if (!comment) {\n      throw new Error('Comment does not exists.');\n    }\n\n    if (typeof data.text === 'string') {\n      comment.text = data.text;\n    }\n\n    console.log(comment);\n    pubsub.publish(`comment ${comment.post}`, {\n      comment: {\n        mutation: 'UPDATED',\n        data: comment,\n      },\n    });\n    return comment;\n  },\n};\n\nexport { Mutation as default };\n"],"file":"Mutation.js"}